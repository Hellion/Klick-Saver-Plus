79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800   1) // ==UserScript==
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800   2) // @name           Klick-saver Plus
d7406053 (Hellion       2010-04-19 15:54:34 -0500   3) // @version        1.70
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800   4) // @namespace      http://kobe.cool.ne.jp/yehman/
8cbebddb (Nathan Sharfi 2010-01-07 13:17:52 -0800   5) // @homepage       http://www.frogorbits.com/kol/
8cbebddb (Nathan Sharfi 2010-01-07 13:17:52 -0800   6) // @copyright      Â© 2010 Nathan Sharfi, Shawn Yeh, and Nick England
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800   7) // @license        GPL; http://www.gnu.org/copyleft/gpl.html
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800   8) // @author         Shawn Yeh (http://kobe.cool.ne.jp/yehman/)
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800   9) // @author         Nick England
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  10) // @contributor    CDMoyer
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  11) // @contributor    adiabatic (http://www.frogorbits.com/)
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  12) // @contributor    Hellion
59acc87c (Nathan Sharfi 2010-01-07 13:30:24 -0800  13) // @contributor    MutantPickles
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  14) // @include        *kingdomofloathing.com/main_c.html
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  15) // @include        *kingdomofloathing.com/main.html
8cbebddb (Nathan Sharfi 2010-01-07 13:17:52 -0800  16) // @include        *kingdomofloathing.com/game.php
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  17) // @include        *kingdomofloathing.com/fight.php*
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  18) // @include        *kingdomofloathing.com/charpane.php
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  19) // @include        *kingdomofloathing.com/adventure.php*
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  20) // @include        *kingdomofloathing.com/choice.php
52132bde (Hellion       2010-04-19 17:55:07 -0500  21) // @include        *kingdomofloathing.com/ocean.php
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  22) // @include        *kingdomofloathing.com/account.php
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  23) // @exclude        forums*kingdomofloathing.com
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  24) // @include        http://127.0.0.1:*
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  25) // @description    This script adds buttons to your charpane which let you select Auto(W)eapon, (I)tem, (S)kill, (A)dventure, (H)eal, (O)lfact, and/or (Q)uit on. Hover your mouse over each button to see what it does when clicked or double-clicked.
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  26) // ==/UserScript==
d7406053 (Hellion       2010-04-19 15:54:34 -0500  27) // v1.70: 	- improved end-of-combat detection 
d7406053 (Hellion       2010-04-19 15:54:34 -0500  28) //			- improved HP/MP reading
d7406053 (Hellion       2010-04-19 15:54:34 -0500  29) //			- a little more coverage of possible error conditions to keep execution going
d7406053 (Hellion       2010-04-19 15:54:34 -0500  30) //			- "M" (Use Last Macro) button replaces the now-useless "H" (Heal stasis-style) button.
52132bde (Hellion       2010-04-19 17:55:07 -0500  31) //			- option to always click "Pick pocket" and "Pick pocket again" buttons (set on Account page, under "Autoattack" options.)
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  32) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  33) const COUNTER = 1;  		//-1: off  0: start on zero  1: start on one
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  34) const AUTO_USE_LIMIT = 26;	//the default round at which autoUse will be temporarily disabled
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  35) const SAFETY_NUMBER = 1.8;	//This is extra safety factor which is used with monster damage
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  36) const STOP_LIST = "abridged dictionary, "+
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  37) 			"pail of pretentious paint, "+
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  38) 			"pretentious paintbrush, "+
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  39) 			"pretentious palette, "+
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  40) 			"plus sign, "+
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  41) 			"box of birthday candles, "+
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  42) 			"eldritch butterknife, "+
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  43) 			"dodecagram, "+
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  44) 			"S.O.C.K., "+
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  45) 			"mosquito larva, "+
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  46) 			"wussiness potion, "+
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  47) 			"ruby W, "+
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  48) 			//"chaos butterfly, "+
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  49) 			"sonar-in-a-biscuit, "+
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  50) 			"baseball, "+
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  51) 			"enchanted bean";
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  52) 
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800  53) var turnsplayed = 0;
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800  54) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  55) // The event manager will unload all registered event on page unload, including itself.
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  56) // Note only by using addEventListener(target,...) will the event be registered, and not
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  57) // target.addEventListener(...), as the prototype function was not replaced.
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  58) var registeredEventListeners = new Array();
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  59) addEventListener(window, 'unload', unregisterEventListeners, false);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  60) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  61) switch(document.location.pathname) {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  62)   case "/main_c.html":
8cbebddb (Nathan Sharfi 2010-01-07 13:17:52 -0800  63)   case "/game.php":
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  64)   case "/main.html":
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  65) 	GM_log("Initialize Values.");
52132bde (Hellion       2010-04-19 17:55:07 -0500  66) 	GM_setValue("autoUse", 0);		//0: off  1: weapon  2: item  3: skill  4: macro
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  67) 	GM_setValue("repeatAdv", 0);		//0: off  1: normal  3: stop on specific item drops
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  68) 	GM_setValue("fightTurns", COUNTER);
52132bde (Hellion       2010-04-19 17:55:07 -0500  69) 	GM_setValue("stopAdvAt", 0);		// stop adventuring when our turncount reaches this number.
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  70) 	GM_setValue("adventuresLeft", 0);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  71) 	GM_setValue("storedSkill", 'none');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  72) 	GM_setValue("MP",0);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  73) 	GM_setValue("HP",0);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  74) 	GM_setValue("MaxHP",0);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  75) 	GM_setValue("MaxMP",0);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  76) 	GM_setValue("skillCost",1);
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800  77) 	GM_setValue("cancelAtEnd",0);	//flag for use by buttons that attack or use item until end of combat.
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  78) 	GM_setValue("autoHeal",0);		//0: off(white)  1: on(green)  2: half(dark green)  4-5: warn(red)
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800  79) 	GM_setValue("MonsterDamage",0);	//Smallest Monster damage received from this fight
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  80) 	if (!GM_getValue("turnLimit")) GM_setValue("turnLimit", AUTO_USE_LIMIT);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  81) 	if (!GM_getValue("finisher")) GM_setValue("finisher", 0);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  82) 	break;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  83) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  84)   case "/charpane.php":
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  85) 	drawButtons();
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  86) 	break;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  87) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  88)   case "/fight.php":
d7406053 (Hellion       2010-04-19 15:54:34 -0500  89) 	var FightHeader = document.getElementsByTagName("b"); if (!FightHeader) return; 
d7406053 (Hellion       2010-04-19 15:54:34 -0500  90) 	FightHeader = FightHeader[0];
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  91) 	var body = document.getElementsByTagName("body")[0].innerHTML;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  92) //----------------------
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  93) // Notes to the maintainer:
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  94) // the GM value "olfact" is a flag to indicate whether the olfaction button is set to active or not.
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  95) // It gets set (or cleared) only in the button-click processing section.
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  96) // 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  97) // "olfactGo", on the other hand, is a flag to indicate whether or not we are interested in olfacting something RIGHT NOW.
d6614a98 (Hellion       2010-04-20 15:20:24 -0500  98) // It is set whenever we load the sidepane and "On the Trail" is not found.
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800  99) // It is cleared whenever we actually olfact something.
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 100) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 101) // first, a check to see if we had to save the old selected skill in order to olfact something last round.
d6614a98 (Hellion       2010-04-20 15:20:24 -0500 102) 	if (GM_getValue("oldskill")) {	// if yes, then we have to switch back to the old skill now.	
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 103) 		var oldskill = GM_getValue("oldskill");
d7406053 (Hellion       2010-04-19 15:54:34 -0500 104) 		var sel = document.getElementsByName("whichskill");	// if combat ends in round 0 due to autoattack or familiar action after autoattack,
d7406053 (Hellion       2010-04-19 15:54:34 -0500 105) 															// there is no select box.  Detect this condition.
d7406053 (Hellion       2010-04-19 15:54:34 -0500 106) 		if (sel) {
d7406053 (Hellion       2010-04-19 15:54:34 -0500 107) 			sel = document.getElementsByName("whichskill")[0];
d7406053 (Hellion       2010-04-19 15:54:34 -0500 108) 			var opts = sel.childNodes; var len = opts.length;
d7406053 (Hellion       2010-04-19 15:54:34 -0500 109) 			for(var i=0; i<len; i++) {
d7406053 (Hellion       2010-04-19 15:54:34 -0500 110) 				if(opts[i].value == oldskill) {
d7406053 (Hellion       2010-04-19 15:54:34 -0500 111) 					sel.selectedIndex = i;
d7406053 (Hellion       2010-04-19 15:54:34 -0500 112) 					break;
d7406053 (Hellion       2010-04-19 15:54:34 -0500 113) 				}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 114) 			}
d6614a98 (Hellion       2010-04-20 15:20:24 -0500 115) 			GM_setValue("oldskill", false);					// only un-set the old skill if we managed to reset the skillbox successfully.
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 116) 		}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 117) 		GM_setValue("olfactGo", 0);	// safety setting:  If we're putting back the old skill, disable olfaction manually for this round just in case the sidepane hasn't been updated yet.
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 118) 	}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 119) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 120) //	GM_log("olfact="+GM_getValue("olfact"));
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 121) //	GM_log("olfactGo="+GM_getValue("olfactGo"));
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 122) 	if(GM_getValue("olfact") && GM_getValue("olfactGo")) {	// If the Olfaction button is on, and "On the trail" is not a current effect:
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 123) 		var monname = document.getElementById("monname");
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 124) 		if(monname && monname.innerHTML.toLowerCase().indexOf(GM_getValue("olfactString").toLowerCase()) != -1) {  // this is what we're after?
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 125) 			GM_setValue("olfactGo", 0);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 126) 			addEventListener(window, 'load', function() {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 127) 				var sel = document.getElementsByName("whichskill")[0];
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 128) 				var opts = sel.childNodes; var len = opts.length; var found = false;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 129) 				for(var i=0; i<len; i++) {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 130) 					if(opts[i].value == 19) {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 131) 						found = true;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 132) 						GM_setValue("oldskill", opts[sel.selectedIndex].value);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 133) 						sel.selectedIndex = i;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 134) 						document.forms.namedItem("skill").submit();
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 135) 						break;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 136) 					}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 137) 				}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 138) 				if(!found) return;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 139) 			}, true);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 140) 			return false;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 141) 		}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 142) 	}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 143) 	
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 144) // "Quit adventuring when you hit this string" processing.
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 145) 	if(GM_getValue("stopGo"))
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 146) 	{	if(document.body.innerHTML.indexOf(GM_getValue("stopString")) != -1)
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 147) 		{	GM_setValue("repeatAdv", 0);
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 148) 			//GM_setValue("stopGo", false);				// uncomment this to force re-clicking in order to re-halt.
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 149) 			return false;
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 150) 		}	
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 151) 	}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 152) //-----------------------
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 153) 	if(GM_getValue("fightTurns") == COUNTER)	// Grab your HP and MP from the charpane during the first round of combat.
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 154) 		grabMPHP();
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 155) 
d7406053 (Hellion       2010-04-19 15:54:34 -0500 156) 	if (!body.match(/WINWINW|Adventure Again |Go back to /g)){		// still in combat? (no win marker/ no adventure again/ no go back?)
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 157) 		var turns = GM_getValue("fightTurns");
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 158) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 159) 		//Adds Round Counter to page, set COUNTER to -1 to turn counter off
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 160) 		if (COUNTER >= 0){
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 161) 			strTurns = " - " + (turns >= AUTO_USE_LIMIT ? "<span style=\"color:red;\">" + "Round " + turns + "</span>" : "Round " + turns);
d7406053 (Hellion       2010-04-19 15:54:34 -0500 162) 			FightHeader.innerHTML += strTurns;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 163) 		}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 164) 		
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 165) 		addInputButtons();
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 166) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 167) 		grabCombatInfo();
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 168) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 169) 		doCombat();
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 170) 	}
d7406053 (Hellion       2010-04-19 15:54:34 -0500 171) 	//if we get here, it must be the end of a combat
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 172) 	else {
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 173) 		if (!body.match(/WINWINW/)) {	// end of combat and no win marker?
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 174) 			GM_setValue("repeatAdv",0); // set flag to not go again.
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 175) 		}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 176) 		doAutoAdv();
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 177) 	}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 178) 	break;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 179) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 180)   case "/adventure.php":
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 181)   case "/choice.php":
52132bde (Hellion       2010-04-19 17:55:07 -0500 182)   case "/ocean.php":
52132bde (Hellion       2010-04-19 17:55:07 -0500 183) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 184) 	if(GM_getValue("repeatAdv"))
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 185) 		doAutoAdv();
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 186) 	break;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 187) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 188)   case "/account.php":
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 189) 	setPrefs();
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 190) 	break;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 191) }
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 192) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 193) function drawButtons() {
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 194) 	var charpaneHead = top.document.getElementsByName('charpane')[0].contentDocument.getElementsByTagName("head")[0];
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 195) 	var pageHeadText = charpaneHead.innerHTML;
d7406053 (Hellion       2010-04-19 15:54:34 -0500 196) //	GM_log("pHT="+pageHeadText);
d7406053 (Hellion       2010-04-19 15:54:34 -0500 197) 	if (pageHeadText.indexOf('played =') != -1) {
d7406053 (Hellion       2010-04-19 15:54:34 -0500 198) 		turnsplayed = parseInt(pageHeadText.split('played =')[1].split(';')[0]);	// read it directly from the charpane if possible.
d7406053 (Hellion       2010-04-19 15:54:34 -0500 199) 	} else {
d7406053 (Hellion       2010-04-19 15:54:34 -0500 200) 		turnsplayed = parseInt(GM_getValue("turnsplayed"))-1;						// otherwise we just assume we spent a turn.
d7406053 (Hellion       2010-04-19 15:54:34 -0500 201) 	}
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 202) 	GM_setValue("turnsplayed", turnsplayed);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 203) 	//render the button layout
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 204) 	// the variable needtoolfact is a flag to indicate whether or not "On the Trail" is a currently active effect
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 205) 	// (i.e. are we already olfacting something).  If True, then we need to olfact ASAP.
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 206) 	var needtoolfact = false;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 207) 	var fullTest = document.getElementsByTagName("a")[0]; if (!fullTest) return;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 208) 	if (fullTest.innerHTML.indexOf("/otherimages/") == -1){		// lacking a graphic from the otherimages directory, we assume that we are in Compact Mode.
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 209) 		var insertAt = document.getElementsByTagName("hr")[0];
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 210) 		var newHr = document.createElement('hr');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 211) 		newHr.setAttribute('width','50%');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 212) 		insertAt.parentNode.insertBefore(newHr, insertAt.nextSibling);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 213) 		var test = document.getElementsByTagName("body")[0].innerHTML.substr(document.getElementsByTagName("body")[0].innerHTML.indexOf("Adv</a>:") + 33, 4);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 214) 		var adventuresLeft = parseInt(test);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 215) 		if(GM_getValue("olfact")) {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 216) 			needtoolfact = true;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 217) // find "On the Trail" in compact mode by using the Alt tags on images.
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 218) 			var imgs = document.getElementsByTagName('img'); var len = imgs.length;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 219) 			for(var i=0; i<len; i++) {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 220) 				if (imgs[i].alt.indexOf("On the Trail") != -1) {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 221) 					needtoolfact = false; i=len; break; 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 222) 				}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 223) 			}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 224) 			if(needtoolfact) GM_setValue("olfactGo", true);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 225) 			else GM_setValue("olfactGo", false);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 226) 		}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 227) 	} else {		// otherwise, we are in Full Mode.
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 228) 		var insertAt = document.getElementsByTagName("table")[0];
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 229) 		var adventuresLeft = parseInt(document.getElementsByTagName("span")[3].innerHTML);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 230) 		if(GM_getValue("olfact")) {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 231) 			needtoolfact = true;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 232) // find "On the Trail" in full mode by using the description text in the font tags.
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 233) 			var effs = document.getElementsByTagName('font'); len = effs.length;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 234) 			for (i=0;i<len;i++) { 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 235) 				if (effs[i].innerHTML.indexOf("On the Trail") != -1) { 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 236) 					needtoolfact = false; i=len; break;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 237) 				} 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 238) 			}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 239) 			if (needtoolfact) GM_setValue("olfactGo",true);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 240) 			else GM_setValue("olfactGo", false);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 241) 		}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 242) 	}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 243) 	GM_setValue("adventuresLeft", adventuresLeft);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 244) 	var newTable = document.createElement('table');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 245) 	var buffer = "<tr><td title='click to autoattack'>W</td>" +
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 246) 				 "<td title='click to auto-use your last-used item'>I</td>" +
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 247) 				 "<td title='click to automatically use your last-used skill'>S</td>" +
d7406053 (Hellion       2010-04-19 15:54:34 -0500 248) 				 "<td title='click to automatically use your last-used combat macro'>M</td>" +
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 249) 				 "<td title='click to automatically adventure again; double-click to auto-adventure for a set number of rounds'>A</td>" +
d7406053 (Hellion       2010-04-19 15:54:34 -0500 250) //				 "<td title='click to autoheal'>h</td>" +
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 251) 				 "<td title='click to automatically olfact a monster'>O</td>" +
d7406053 (Hellion       2010-04-19 15:54:34 -0500 252) 				 "<td title='click to quit on seeing some text'>Q</td></tr>" ;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 253) 	addGlobalStyle("table[id='buttonbox'] { table-layout: auto }"
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 254) 			+ "table[id='buttonbox'] { border-spacing: 1px }"
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 255) 			+ "table[id='buttonbox'] td { width: 11px }"
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 256) 			+ "table[id='buttonbox'] td { font-size: .6em }"
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 257) 			+ "table[id='buttonbox'] td { border: 2px solid black }"
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 258) 			+ "table[id='buttonbox'] td { text-align: center }"
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 259) 			+ "table[id='buttonbox'] td { cursor: default }"
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 260) 			+ "table[id='buttonbox'] td.off { background-color: white }"
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 261) 			+ "table[id='buttonbox'] td.on { background-color: lime }"
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 262) 			+ "table[id='buttonbox'] td.warn { background-color: red }"
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 263) 			+ "table[id='buttonbox'] td.half { background-color: #32CD32 }"
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 264) 				);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 265) 	newTable.setAttribute('id','buttonbox');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 266) 	newTable.innerHTML = buffer;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 267) 	var tdArray = newTable.getElementsByTagName("td");
d7406053 (Hellion       2010-04-19 15:54:34 -0500 268) 	if ((GM_getValue("autoUse") % 5) > 0)
d7406053 (Hellion       2010-04-19 15:54:34 -0500 269) 		tdArray[(GM_getValue("autoUse") % 5) - 1].setAttribute('class',(GM_getValue("autoUse") < 5)?'on':'warn');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 270) 	if (GM_getValue("repeatAdv"))
d7406053 (Hellion       2010-04-19 15:54:34 -0500 271) 		tdArray[4].setAttribute('class',(GM_getValue("repeatAdv") < 2)?'on':'half');
52132bde (Hellion       2010-04-19 17:55:07 -0500 272) 	if (GM_getValue("stopAdvAt") > turnsplayed && GM_getValue("stopAdvAt") > 0)
d7406053 (Hellion       2010-04-19 15:54:34 -0500 273) 		tdArray[4].innerHTML = GM_getValue("stopAdvAt") - turnsplayed;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 274) 	if (GM_getValue("olfact"))
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 275) 		tdArray[5].setAttribute('class','on');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 276) 	if (GM_getValue("stopGo"))
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 277) 		tdArray[6].setAttribute('class','on');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 278) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 279) 	
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 280) 	//add button functions
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 281) 	for (var i=0; i<tdArray.length; i++){
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 282) 		switch (i) {
d7406053 (Hellion       2010-04-19 15:54:34 -0500 283) 		   case 0:	// W
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 284) 			addEventListener(tdArray[i], 'click', function(event) {
d7406053 (Hellion       2010-04-19 15:54:34 -0500 285) 				if (GM_getValue("autoUse") % 5 == 1){
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 286) 				  GM_setValue("autoUse", 0);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 287) 				  this.setAttribute('class','off');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 288) 				}else{
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 289) 				  GM_setValue("autoUse", 1);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 290) 				  this.setAttribute('class','on');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 291) 				  this.nextSibling.setAttribute('class','off');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 292) 				  this.nextSibling.nextSibling.setAttribute('class','off');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 293) 				}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 294) 			}, true);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 295) 			addEventListener(tdArray[i], 'dblclick', function(event) {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 296) 				var turnLimit = parseInt(prompt('Stop Auto-Doing Stuff after XX Rounds... (1-29)'));
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 297) 				if (turnLimit > 1 && turnLimit < 30 )
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 298) 					GM_setValue("turnLimit", turnLimit);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 299) 				else
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 300) 					GM_setValue("turnLimit", AUTO_USE_LIMIT);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 301) 			}, true);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 302) 		      break;
d7406053 (Hellion       2010-04-19 15:54:34 -0500 303) 		   case 1:	// I
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 304) 			addEventListener(tdArray[i], 'click', function(event) {
d7406053 (Hellion       2010-04-19 15:54:34 -0500 305) 				if (GM_getValue("autoUse") % 5 == 2){
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 306) 				  GM_setValue("autoUse", 0);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 307) 				  this.setAttribute('class','off');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 308) 				}else{
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 309) 				  GM_setValue("autoUse", 2);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 310) 				  this.setAttribute('class','on');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 311) 				  this.nextSibling.setAttribute('class','off');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 312) 				  this.previousSibling.setAttribute('class','off');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 313) 				}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 314) 			}, true);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 315) 		      break;
d7406053 (Hellion       2010-04-19 15:54:34 -0500 316) 		   case 2:	// S
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 317) 			addEventListener(tdArray[i], 'click', function(event) {
d7406053 (Hellion       2010-04-19 15:54:34 -0500 318) 				if (GM_getValue("autoUse") % 5 == 3){
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 319) 				  GM_setValue("autoUse", 0);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 320) 				  this.setAttribute('class','off');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 321) 				}else{
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 322) 				  GM_setValue("autoUse", 3);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 323) 				  this.setAttribute('class','on');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 324) 				  this.previousSibling.setAttribute('class','off');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 325) 				  this.previousSibling.previousSibling.setAttribute('class','off');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 326) 				}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 327) 			}, true);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 328) 		      break;
d7406053 (Hellion       2010-04-19 15:54:34 -0500 329) 		   case 3:	// M
d7406053 (Hellion       2010-04-19 15:54:34 -0500 330) 		   	addEventListener(tdArray[i], 'click', function(event) {
d7406053 (Hellion       2010-04-19 15:54:34 -0500 331) 				if (GM_getValue("autoUse") % 5 == 4){
d7406053 (Hellion       2010-04-19 15:54:34 -0500 332) 				  GM_setValue("autoUse", 0);
d7406053 (Hellion       2010-04-19 15:54:34 -0500 333) 				  this.setAttribute('class','off');
d7406053 (Hellion       2010-04-19 15:54:34 -0500 334) 				}else{
d7406053 (Hellion       2010-04-19 15:54:34 -0500 335) 				  GM_setValue("autoUse", 4);
d7406053 (Hellion       2010-04-19 15:54:34 -0500 336) 				  this.setAttribute('class','on');
d7406053 (Hellion       2010-04-19 15:54:34 -0500 337) 				  this.previousSibling.setAttribute('class','off');
d7406053 (Hellion       2010-04-19 15:54:34 -0500 338) 				  this.previousSibling.previousSibling.setAttribute('class','off');
d7406053 (Hellion       2010-04-19 15:54:34 -0500 339) 				}
d7406053 (Hellion       2010-04-19 15:54:34 -0500 340) 			}, true);
d7406053 (Hellion       2010-04-19 15:54:34 -0500 341) 		    break;
d7406053 (Hellion       2010-04-19 15:54:34 -0500 342) 			case 4:	// A
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 343) 			addEventListener(tdArray[i], 'contextmenu', function(event) {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 344) 				if (event.button == 2){
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 345) 					event.stopPropagation();
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 346) 					event.preventDefault();
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 347) 				}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 348) 			}, false);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 349) 			addEventListener(tdArray[i], 'mousedown', function(event) {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 350) 				if (event.button == 2 && GM_getValue("repeatAdv") != 3){
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 351) 				  GM_setValue("repeatAdv", 3);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 352) 				  this.setAttribute('class','half');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 353) 				}else if (event.button == 0 && GM_getValue("repeatAdv") != 1){
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 354) 				  GM_setValue("repeatAdv", 1);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 355) 				  this.setAttribute('class','on');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 356) 				}else{
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 357) 				  GM_setValue("repeatAdv", 0);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 358) 				  this.setAttribute('class','off');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 359) 				}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 360) 			}, true);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 361) 			addEventListener(tdArray[i], 'dblclick', function(event) {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 362) 				var adventureLimit = parseInt(prompt('Auto-adventure for how many turns?'));
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 363) 				if (adventureLimit > adventuresLeft) adventureLimit = adventuresLeft;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 364) 				else if (adventureLimit < 0 || !adventureLimit) adventureLimit = 0;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 365) 				if (adventureLimit > 0) {
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 366) 					GM_setValue("stopAdvAt", turnsplayed + adventureLimit);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 367) 					GM_setValue("repeatAdv", 1);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 368) 					this.innerHTML = adventureLimit;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 369) 					this.setAttribute('class','on');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 370) 				}else if (adventureLimit == 0){
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 371) 					GM_setValue("stopAdvAt", turnsplayed);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 372) 					GM_setValue("repeatAdv", 0);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 373) 					this.innerHTML = 'A';
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 374) 					this.setAttribute('class','off');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 375) 				}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 376) 			}, true);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 377) 		      break;
d7406053 (Hellion       2010-04-19 15:54:34 -0500 378) 		   case 5:	// O
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 379) 			addEventListener(tdArray[i], 'mouseup', function(event) {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 380) 				if (GM_getValue("olfact")){
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 381) 				  GM_setValue("olfact", false);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 382) 				  this.setAttribute('class','off');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 383) 				}else{
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 384) 				  GM_setValue("olfact", true);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 385) 				  this.setAttribute('class','on');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 386) 				}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 387) 			}, true);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 388) 			addEventListener(tdArray[i], 'dblclick', function(event) {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 389) 				var monster = GM_getValue("olfactString", monster);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 390) 				if(monster == undefined) monster = '';
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 391) 				monster = prompt('Transcendently Olfact which monster?', monster);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 392) 				if (monster && monster != '') {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 393) 					GM_setValue("olfactString", monster);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 394) 					GM_setValue("olfact", true);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 395) 					this.setAttribute('class','on');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 396) 				} else {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 397) 					GM_setValue("olfactString", '');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 398) 					GM_setValue("olfact", false);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 399) 					this.setAttribute('class','off');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 400) 				}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 401) 				event.stopPropagation();
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 402) 				event.preventDefault();
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 403) 			}, true);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 404) 		    break;
d7406053 (Hellion       2010-04-19 15:54:34 -0500 405) 		   case 6:	// Q
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 406) 			addEventListener(tdArray[i], 'mouseup', function(event) {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 407) 				if (GM_getValue("stopGo")){
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 408) 				  GM_setValue("stopGo", false);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 409) 				  this.setAttribute('class','off');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 410) 				}else{
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 411) 				  GM_setValue("stopGo", true);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 412) 				  this.setAttribute('class','on');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 413) 				}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 414) 			}, true);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 415) 			addEventListener(tdArray[i], 'dblclick', function(event) {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 416) 				var stopstr = GM_getValue("stopString");
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 417) 				if(stopstr == undefined) stopstr = '';
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 418) 				stopstr = prompt('Stop adventuring when seeing this (case-sensitive) string:', stopstr);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 419) 				if (stopstr && stopstr != '') {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 420) 					GM_setValue("stopString", stopstr);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 421) 					GM_setValue("stopGo", true);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 422) 					this.setAttribute('class','on');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 423) 				} else {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 424) 					GM_setValue("stopString", '');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 425) 					GM_setValue("stopGo", false);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 426) 					this.setAttribute('class','off');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 427) 				}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 428) 				event.stopPropagation();
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 429) 				event.preventDefault();
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 430) 			}, true);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 431) 		   break;
d7406053 (Hellion       2010-04-19 15:54:34 -0500 432) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 433) 		}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 434) 	}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 435) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 436) 	insertAt.parentNode.insertBefore(newTable, insertAt.nextSibling);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 437) }
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 438) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 439) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 440) // Try to read in MP and HP values from the charpane
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 441) //
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 442) function grabMPHP() {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 443) 	var charpaneDoc = top.document.getElementsByName('charpane')[0].contentDocument.getElementsByTagName("body")[0];
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 444) 	var charpaneHead = top.document.getElementsByName('charpane')[0].contentDocument.getElementsByTagName("head")[0];
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 445) 	if (!charpaneDoc) return;
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 446) 	pageHeadText = charpaneHead.innerHTML;
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 447) 	turnsplayed = parseInt(pageHeadText.split('played =')[1].split(';')[0]);
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 448) 	GM_setValue("turnsplayed",turnsplayed);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 449) 	var pageBodyText = charpaneDoc.innerHTML;
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 450) // full mode:
8cbebddb (Nathan Sharfi 2010-01-07 13:17:52 -0800 451) 	var HP = pageBodyText.match(/onclick='doc\("hp"\);'>(?:<[^<]+>)*(\d+)(?:<[^<]+>)*(?:\&nbsp;)?\/(?:\&nbsp;)?(\d+)<\/span>/);
8cbebddb (Nathan Sharfi 2010-01-07 13:17:52 -0800 452) 	var MP = pageBodyText.match(/onclick='doc\("mp"\);'>(?:<[^<]+>)*(\d+)(?:<[^<]+>)*(?:\&nbsp;)?\/(?:\&nbsp;)?(\d+)<\/span>/);
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 453) // compact mode: 
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 454) 	if (!HP) HP = pageBodyText.match(/HP:(?:<[^<]+>)*(\d+)(?:<[^<]+>)*(?:\&nbsp;)?\/(?:\&nbsp;)?(\d+)/);
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 455) 	if (!MP) MP = pageBodyText.match(/MP:(?:<[^<]+>)*(\d+)(?:<[^<]+>)*(?:\&nbsp;)?\/(?:\&nbsp;)?(\d+)/);
8cbebddb (Nathan Sharfi 2010-01-07 13:17:52 -0800 456) 	
8cbebddb (Nathan Sharfi 2010-01-07 13:17:52 -0800 457) 	// Set HP values.
8cbebddb (Nathan Sharfi 2010-01-07 13:17:52 -0800 458) 	if (HP) {
8cbebddb (Nathan Sharfi 2010-01-07 13:17:52 -0800 459) 		GM_setValue("HP", Number(HP[1]));
8cbebddb (Nathan Sharfi 2010-01-07 13:17:52 -0800 460) 		GM_setValue("MaxHP", Number(HP[2]));
8cbebddb (Nathan Sharfi 2010-01-07 13:17:52 -0800 461) 	}
8cbebddb (Nathan Sharfi 2010-01-07 13:17:52 -0800 462) 	else {
8cbebddb (Nathan Sharfi 2010-01-07 13:17:52 -0800 463) 		GM_log("grabMPHP(): Error - Regex used to extract HP/MaxXP failed to match anything.");
8cbebddb (Nathan Sharfi 2010-01-07 13:17:52 -0800 464) 	}
8cbebddb (Nathan Sharfi 2010-01-07 13:17:52 -0800 465) 	
8cbebddb (Nathan Sharfi 2010-01-07 13:17:52 -0800 466) 	// Set MP values.
8cbebddb (Nathan Sharfi 2010-01-07 13:17:52 -0800 467) 	if (MP) {
8cbebddb (Nathan Sharfi 2010-01-07 13:17:52 -0800 468) 		GM_setValue("MP", Number(MP[1]));
8cbebddb (Nathan Sharfi 2010-01-07 13:17:52 -0800 469) 		GM_setValue("MaxMP", Number(MP[2]));
8cbebddb (Nathan Sharfi 2010-01-07 13:17:52 -0800 470) 	}
8cbebddb (Nathan Sharfi 2010-01-07 13:17:52 -0800 471) 	else {
8cbebddb (Nathan Sharfi 2010-01-07 13:17:52 -0800 472) 		GM_log("grabMPHP(): Error - Regex used to extract MP/MaxMP failed to match anything.");
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 473) 	}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 474) }
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 475) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 476) function addInputButtons() {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 477) 	// for attacking until the end of the round
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 478)     var NewAttack = document.createElement('input');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 479) 	NewAttack.setAttribute('class','button');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 480) 	NewAttack.setAttribute('value','Attack!');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 481) 	NewAttack.setAttribute('type','button');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 482) 	NewAttack.setAttribute('style','margin-left:1em;display:inline;');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 483) 	NewAttack.setAttribute("id","NewAttack");
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 484) 	addEventListener(NewAttack, 'click', AttackScript, true);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 485) 	document.getElementById('tack').parentNode.appendChild(NewAttack);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 486) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 487)     // for using the current item until the end of the round
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 488) 	var NewItem = document.createElement('input');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 489) 	NewItem.setAttribute('class','button');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 490) 	NewItem.setAttribute('value','Item!');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 491) 	NewItem.setAttribute('type','button');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 492) 	NewItem.setAttribute('style','margin-left:1em;display:inline;');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 493) 	addEventListener(NewItem, 'click', ItemScript, true);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 494) 	document.getElementById("NewAttack").parentNode.appendChild(NewItem);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 495) }
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 496) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 497) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 498) // Grab combat information like MP, HP, monster damage, and fumble damage
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 499) //
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 500) function grabCombatInfo(){
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 501) 	var pageBodyText = document.getElementsByTagName("body")[0].innerHTML;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 502) 	
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 503) 	//This section grabs MP healing
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 504) 	var MPGainText = pageBodyText.match(/You gain \d+ (?=Muscularity|Mana|Mojo)/g);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 505) 	if(MPGainText){
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 506) 		for(var i=0;i<MPGainText.length;i++){
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 507) 			var curGain = Number(MPGainText[i].slice(8,-1));
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 508) 			GM_setValue("MP", GM_getValue("MP") + curGain);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 509) 			//GM_log("Gained "+curGain+" MP, current MP: "+GM_getValue("MP"));
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 510) 			if(GM_getValue("MP") > GM_getValue("MaxMP"))
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 511) 				GM_setValue("MP",GM_getValue("MaxMP"));
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 512) 		}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 513) 	}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 514) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 515) 	//This section grabs player healing
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 516) 	var HealText = pageBodyText.match(/You gain \d+ (?=hit point)/g);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 517) 	if(HealText){
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 518) 		for(var i=0;i<HealText.length;i++){
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 519) 			var curHeal = Number(HealText[i].slice(8,-1));
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 520) 			GM_setValue("HP",GM_getValue("HP") + curHeal);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 521) 			//GM_log("Healed " +curHeal+ " HP, current HP: "+GM_getValue("HP"));
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 522) 			if(GM_getValue("HP") > GM_getValue("MaxHP") && !(i == HealText.length -1 && pageBodyText.indexOf("Your Jalape") != -1))
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 523) 				GM_setValue("HP",GM_getValue("MaxHP"));
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 524) 		}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 525) 	}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 526) 		
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 527) 	//This section grabs MP loss
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 528) 	var MPLossText = pageBodyText.match(/You lose \d+ (?=Muscularity|Mana|Mojo)/g);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 529) 	if(MPLossText){
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 530) 		var curLoss = Number(MPLossText[0].slice(8,-1));
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 531) 		GM_setValue("MP", GM_getValue("MP") - curLoss);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 532) 		//GM_log("Loss MP: "+curLoss);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 533) 		if(GM_getValue("MP") < 0)
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 534) 			GM_setValue("MP", 0);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 535) 	}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 536) 	
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 537) 	//This section tries to grab monster damage
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 538) 	var DamageText = pageBodyText.match(/You lose \d+ (?=hit point)/g);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 539) 	if(DamageText){
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 540) 		var curDamage = Number(DamageText[0].slice(8,-1));
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 541) 		GM_setValue("HP",GM_getValue("HP") - curDamage);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 542) 		if (curDamage < GM_getValue("MonsterDamage") || GM_getValue("MonsterDamage")==0){
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 543) 			GM_setValue("MonsterDamage",curDamage);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 544) 			//GM_log("MDam: "+GM_getValue("MonsterDamage") +", current HP: "+GM_getValue("HP"));
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 545) 		}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 546) 	}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 547) }
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 548) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 549) function doCombat() {
ad70580a (Nathan Sharfi 2010-01-07 12:53:53 -0800 550) 	if (GM_getValue("fightTurns") < GM_getValue("turnLimit")) {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 551) 
d7406053 (Hellion       2010-04-19 15:54:34 -0500 552) 		var useThis = GM_getValue("autoUse") % 5;
8cbebddb (Nathan Sharfi 2010-01-07 13:17:52 -0800 553) 		GM_setValue("autoUse",useThis);
52132bde (Hellion       2010-04-19 17:55:07 -0500 554) 
52132bde (Hellion       2010-04-19 17:55:07 -0500 555) // 		pickpocket / pickpocket again
52132bde (Hellion       2010-04-19 17:55:07 -0500 556) 		if (GM_getValue("alwayspick") == 1) {
52132bde (Hellion       2010-04-19 17:55:07 -0500 557) 			if (document.forms.namedItem("steal")) document.forms.namedItem("steal").submit();
52132bde (Hellion       2010-04-19 17:55:07 -0500 558) 		}
52132bde (Hellion       2010-04-19 17:55:07 -0500 559) 
ad70580a (Nathan Sharfi 2010-01-07 12:53:53 -0800 560) 		switch(useThis) {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 561) 			case 1:
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 562) 			  addEventListener(window, 'load', function() { document.forms.namedItem("attack").submit(); }, true);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 563) 			break;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 564) 			case 2:
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 565) 			  addEventListener(window, 'load', function() {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 566) 				var itemChosen = getSelectByName("whichitem").selectedIndex;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 567) 				if (itemChosen == 0){
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 568) 					setToRed();
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 569) 					return;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 570) 				}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 571) 				document.forms.namedItem("useitem").submit(); 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 572) 			  }, true);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 573) 			break;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 574) 			case 3:
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 575) 			  addEventListener(window, 'load', function() { 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 576) 				var whichSkillRef = getSelectByName("whichskill");  if (!whichSkillRef) return;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 577) 				if (whichSkillRef.options[whichSkillRef.selectedIndex].value.match(/4014|3009/g)){
d7406053 (Hellion       2010-04-19 15:54:34 -0500 578) 					for(var i = 0; i < whichSkillRef.length; i++) {
d7406053 (Hellion       2010-04-19 15:54:34 -0500 579) 						if(whichSkillRef.options[i].value == GM_getValue("storedSkill")) {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 580) 							whichSkillRef.selectedIndex = i;
d7406053 (Hellion       2010-04-19 15:54:34 -0500 581) 						}
d7406053 (Hellion       2010-04-19 15:54:34 -0500 582) 					}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 583) 				}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 584) 				if (whichSkillRef.selectedIndex == 0){
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 585) 					setToRed();
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 586) 					return;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 587) 				}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 588) 				var costText = whichSkillRef.options[whichSkillRef.selectedIndex].text.match(/\d+/g);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 589) 				if (costText){
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 590) 					GM_setValue("skillCost", Number(costText[0]));
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 591) 					GM_setValue("MP", GM_getValue("MP") - costText[0]);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 592) 				}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 593) 				document.forms.namedItem("skill").submit();
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 594) 			  }, true);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 595) 			break;
d7406053 (Hellion       2010-04-19 15:54:34 -0500 596) 			case 4:
d7406053 (Hellion       2010-04-19 15:54:34 -0500 597) 				addEventListener(window, 'load', function() {
d7406053 (Hellion       2010-04-19 15:54:34 -0500 598) 					var whichMacroRef = getSelectByName("whichmacro"); if (!whichMacroRef) return;
d7406053 (Hellion       2010-04-19 15:54:34 -0500 599) 					var macroChosen = whichMacroRef.selectedIndex;
d7406053 (Hellion       2010-04-19 15:54:34 -0500 600) 					if (macroChosen == 0) {
d7406053 (Hellion       2010-04-19 15:54:34 -0500 601) 						setToRed();
d7406053 (Hellion       2010-04-19 15:54:34 -0500 602) 						return;
d7406053 (Hellion       2010-04-19 15:54:34 -0500 603) 					}
d7406053 (Hellion       2010-04-19 15:54:34 -0500 604) 					document.forms.namedItem("macro").submit();
d7406053 (Hellion       2010-04-19 15:54:34 -0500 605) 				}, true);
d7406053 (Hellion       2010-04-19 15:54:34 -0500 606) 			break;
ad70580a (Nathan Sharfi 2010-01-07 12:53:53 -0800 607) 			default:
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 608) 			// 	no automatic combat action selected.
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 609) 			//	GM_log("whuh?");
ad70580a (Nathan Sharfi 2010-01-07 12:53:53 -0800 610) 			break;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 611) 		}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 612) 	}else if (GM_getValue("finisher") != 0){
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 613) 		  addEventListener(window, 'load', function() { 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 614) 			if (GM_getValue("finisher") == 1){
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 615) 				document.forms.namedItem("attack").submit();
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 616) 				return;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 617) 			}
ad70580a (Nathan Sharfi 2010-01-07 12:53:53 -0800 618) 			var whichSkillRef = document.getElementsByName("whichskill")[0];
ad70580a (Nathan Sharfi 2010-01-07 12:53:53 -0800 619) 			
ad70580a (Nathan Sharfi 2010-01-07 12:53:53 -0800 620) 			if (!whichSkillRef) return;
ad70580a (Nathan Sharfi 2010-01-07 12:53:53 -0800 621) 			
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 622) 			for(var i = 0; i < whichSkillRef.length; i++)
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 623) 				if(whichSkillRef.options[i].value == GM_getValue("finisher"))
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 624) 					whichSkillRef.selectedIndex = i;
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 625) 			// GM_log("Using finisher: "+GM_getValue("finisher"));
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 626) 			if (whichSkillRef.selectedIndex == 0){
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 627) 				setToRed();
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 628) 				return;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 629) 			}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 630) 			var costText = whichSkillRef.options[whichSkillRef.selectedIndex].text.match(/\d+/g);
d7406053 (Hellion       2010-04-19 15:54:34 -0500 631) 			if (costText) GM_setValue("MP", GM_getValue("MP") - costText[0]);
ad70580a (Nathan Sharfi 2010-01-07 12:53:53 -0800 632) 			document.forms.namedItem("skill").submit();		
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 633) 		  }, true);
d7406053 (Hellion       2010-04-19 15:54:34 -0500 634) 	} else {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 635) 		setToRed();
d7406053 (Hellion       2010-04-19 15:54:34 -0500 636) 	}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 637) 	GM_setValue("fightTurns", ++turns);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 638) }
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 639) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 640) // Automatically click the Adventure Again button from the fight screen
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 641) //
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 642) function doAutoAdv() {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 643) 	grabCombatInfo();
d7406053 (Hellion       2010-04-19 15:54:34 -0500 644) 	GM_log("MP: "+GM_getValue("MP")+".  skillCost: "+GM_getValue("skillCost")+".  HP: "+GM_getValue("HP")+".  MonsterDamage: "+GM_getValue("MonsterDamage"));
d7406053 (Hellion       2010-04-19 15:54:34 -0500 645) 	GM_log(" adventuresLeft: "+GM_getValue("adventuresLeft")+" stopAdvAt: "+GM_getValue("stopAdvAt")+" turns played:" +GM_getValue("turnsplayed"));
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 646) 	
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 647) 	var stopAdvAt = GM_getValue("stopAdvAt");
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 648) 	var body = document.getElementsByTagName("body")[0].innerHTML;
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 649) 	var acquiredStuff = body.match(/item: <b>[^<]+/g);
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 650) 	if (GM_getValue("repeatAdv") == 3 && acquiredStuff){
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 651) 		for (var i = 0; i < acquiredStuff.length; i++){
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 652) 			//GM_log("item" +i+ ": " + acquiredStuff[i].slice(9));
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 653) 			if (STOP_LIST.indexOf(acquiredStuff[i].slice(9)) >= 0)
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 654) 				GM_setValue("repeatAdv", 0);  //stop-listed item acquired
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 655) 		}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 656) 	}
d7406053 (Hellion       2010-04-19 15:54:34 -0500 657) 	if ( (GM_getValue("MP") < GM_getValue("skillCost") && GM_getValue("autoUse")%5 == 3)//MP less than cast amount for autoskill
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 658) 	   || ((stopAdvAt > 0) && (stopAdvAt <= GM_getValue("turnsplayed") + 1))			//Auto-adventure limit reached
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 659) 	   ||(GM_getValue("HP") < 1)										//Beaten up
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 660) 	   ||(GM_getValue("repeatAdv") == 3 && body.match(/You gain (?:a|some) Level/g))	//Level up
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 661) 	   ||(GM_getValue("MonsterDamage") * 1.1 >= GM_getValue("HP"))						//Monster could kill you in one hit
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 662) 	   ) {
d7406053 (Hellion       2010-04-19 15:54:34 -0500 663) 		GM_log("stopping for some reason.");
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 664) 		GM_setValue("repeatAdv", 0);
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 665) 		if (stopAdvAt >= GM_getValue("turnsplayed") + 1) {		// if we halted because we finished running the requested # of turns,
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 666) 			GM_setValue("stopAdvAt", 0);						// reset turncounter so that simply clicking the A will run all.
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 667) 		}
5130b5d2 (Nathan Sharfi 2010-01-20 19:44:30 -0800 668) 	}
d7406053 (Hellion       2010-04-19 15:54:34 -0500 669) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 670) 	//Reset some values since combat is over
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 671) 	GM_setValue("fightTurns", COUNTER);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 672) 	GM_setValue("MonsterDamage", 0);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 673) 	GM_setValue("autoHeal", GM_getValue("autoHeal") % 3);
d7406053 (Hellion       2010-04-19 15:54:34 -0500 674) 	GM_setValue("autoUse", GM_getValue("autoUse") % 5);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 675) 	if(GM_getValue("cancelAtEnd") == 1){
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 676) 		GM_setValue("autoUse", 0);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 677) 		GM_setValue("cancelAtEnd", 0);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 678) 	}
d7406053 (Hellion       2010-04-19 15:54:34 -0500 679) 	if (GM_getValue("repeatAdv")) {
d7406053 (Hellion       2010-04-19 15:54:34 -0500 680) 		addEventListener(window, 'load', function() {
d7406053 (Hellion       2010-04-19 15:54:34 -0500 681) 			var anchors = document.getElementsByTagName("a");
d7406053 (Hellion       2010-04-19 15:54:34 -0500 682) 			for (var i = 0; i < anchors.length; i++) {
d7406053 (Hellion       2010-04-19 15:54:34 -0500 683) 				if ((anchors[i].getAttribute('href')) && (anchors[i].getAttribute("href").indexOf("adventure.php") != -1)) {
d7406053 (Hellion       2010-04-19 15:54:34 -0500 684) //					GM_log("href="+anchors[i].getAttribute('href')+"; using anchor "+i);
d7406053 (Hellion       2010-04-19 15:54:34 -0500 685) 					document.location = anchors[i]; // document.links[i];
d7406053 (Hellion       2010-04-19 15:54:34 -0500 686) 					break;
d7406053 (Hellion       2010-04-19 15:54:34 -0500 687) 				}
d7406053 (Hellion       2010-04-19 15:54:34 -0500 688) 			}
d7406053 (Hellion       2010-04-19 15:54:34 -0500 689) 		}, false);
d7406053 (Hellion       2010-04-19 15:54:34 -0500 690) 	}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 691) }
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 692) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 693) function setPrefs() {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 694) 	var newBr = document.createElement('br');
52132bde (Hellion       2010-04-19 17:55:07 -0500 695) 	var newB2 = document.createElement('br');				// probably don't need two of these ... ?
52132bde (Hellion       2010-04-19 17:55:07 -0500 696) 	var finisherButton = document.createElement('input');	// sets the skill to use when turnLimit is reached.
52132bde (Hellion       2010-04-19 17:55:07 -0500 697) 	var pickButton = document.createElement('input');		// always click "PickPocket" immediately if the button is present.
52132bde (Hellion       2010-04-19 17:55:07 -0500 698) 
52132bde (Hellion       2010-04-19 17:55:07 -0500 699) 	finisherButton.setAttribute('class','button');
52132bde (Hellion       2010-04-19 17:55:07 -0500 700) 	finisherButton.setAttribute('value',(GM_getValue("finisher") == 0)?'Change Finisher':'Finisher - '+finisherName(GM_getValue("finisher")) );
52132bde (Hellion       2010-04-19 17:55:07 -0500 701) 	finisherButton.setAttribute('type','button');
52132bde (Hellion       2010-04-19 17:55:07 -0500 702) 	finisherButton.setAttribute('style','margin-top:.1em;');
52132bde (Hellion       2010-04-19 17:55:07 -0500 703) 	finisherButton.setAttribute('id','finisherButton');
52132bde (Hellion       2010-04-19 17:55:07 -0500 704) 	addEventListener(finisherButton, 'click', finishClicked, true);
52132bde (Hellion       2010-04-19 17:55:07 -0500 705) 	
52132bde (Hellion       2010-04-19 17:55:07 -0500 706) 	pickButton.setAttribute('class','button');
52132bde (Hellion       2010-04-19 17:55:07 -0500 707) 	pickButton.setAttribute('value',(GM_getValue("alwayspick") == 0?'Always pickpocket: NO':'Always pickpocket: YES'));
52132bde (Hellion       2010-04-19 17:55:07 -0500 708) 	pickButton.setAttribute('type','button');
52132bde (Hellion       2010-04-19 17:55:07 -0500 709) 	pickButton.setAttribute('style','margin-top:.1em');
52132bde (Hellion       2010-04-19 17:55:07 -0500 710) 	pickButton.setAttribute('id','pickButton');
52132bde (Hellion       2010-04-19 17:55:07 -0500 711) 	addEventListener(pickButton, 'click', pickClicked, true);
52132bde (Hellion       2010-04-19 17:55:07 -0500 712) 	
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 713) 	var inputArray = document.getElementById('autohelp').getElementsByTagName('input');
52132bde (Hellion       2010-04-19 17:55:07 -0500 714) 	for (var i = 0; i < inputArray.length; i++) {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 715) 		if(inputArray[i].value == 'Change Auto-Attack'){
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 716) 			inputArray[i].parentNode.appendChild(newBr);
52132bde (Hellion       2010-04-19 17:55:07 -0500 717) 			inputArray[i].parentNode.appendChild(finisherButton);
52132bde (Hellion       2010-04-19 17:55:07 -0500 718) 			inputArray[i].parentNode.appendChild(newB2);
52132bde (Hellion       2010-04-19 17:55:07 -0500 719) 			inputArray[i].parentNode.appendChild(pickButton);
52132bde (Hellion       2010-04-19 17:55:07 -0500 720) 			break;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 721) 		}
52132bde (Hellion       2010-04-19 17:55:07 -0500 722) 	}
52132bde (Hellion       2010-04-19 17:55:07 -0500 723) 	function finishClicked() {		// set finisher to whatever's in the autoattack dropdown.
d6614a98 (Hellion       2010-04-20 15:20:24 -0500 724) 		var whichAttack = document.getElementsByName("whichattack");
d6614a98 (Hellion       2010-04-20 15:20:24 -0500 725) 		GM_setValue("finisher", whichAttack[0].value);
52132bde (Hellion       2010-04-19 17:55:07 -0500 726) 		this.value = "Finisher - " + finisherName(GM_getValue("finisher"));
52132bde (Hellion       2010-04-19 17:55:07 -0500 727) 	}
52132bde (Hellion       2010-04-19 17:55:07 -0500 728) 	function pickClicked() {		// toggle always-pickpocket option.
52132bde (Hellion       2010-04-19 17:55:07 -0500 729) 		var pickpocket = GM_getValue("alwayspick",0);
52132bde (Hellion       2010-04-19 17:55:07 -0500 730) 		pickpocket = 1 - parseInt(pickpocket);
52132bde (Hellion       2010-04-19 17:55:07 -0500 731) 		GM_setValue("alwayspick",pickpocket);
52132bde (Hellion       2010-04-19 17:55:07 -0500 732) 		this.value = pickpocket?"Always pickpocket: YES":"Always pickpocket: NO";
52132bde (Hellion       2010-04-19 17:55:07 -0500 733) 	}
52132bde (Hellion       2010-04-19 17:55:07 -0500 734) 	// Grab the skill name from the option list to display in the button text.
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 735) 	function finisherName(val){
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 736) 		var whichAttack = document.getElementsByName('whichattack');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 737) 		for (var i = 0; i < whichAttack[0].options.length; i++)
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 738) 			if (whichAttack[0].options[i].value == val)
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 739) 				var finisherStr = whichAttack[0].options[i].text;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 740) 		if (finisherStr){
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 741) 			if (val == 0) return('disabled');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 742) 			else if (val == 1) return('Attack with weapon');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 743) 			else return(finisherStr.match(/[^\(]+/g)[0]);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 744) 		}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 745) 		else return(null);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 746) 	}
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 747) }
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 748) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 749) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 750) // Memory-Leak-free event handling
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 751) //
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 752) // Registering event handlers with node.addEventHandler causes memory leaks.
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 753) // Adding via this function tracks them all, so they can be removed
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 754) // when the page unloads.
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 755) function addEventListener(target, event, listener, capture)
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 756) {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 757)     registeredEventListeners.push( [target, event, listener, capture] );
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 758)     target.addEventListener(event, listener, capture);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 759) }
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 760) function unregisterEventListeners(event)
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 761) {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 762)     for (var i = 0; i < registeredEventListeners.length; i++)
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 763)     {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 764)         var rel = registeredEventListeners[i];
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 765)         rel[0].removeEventListener(rel[1], rel[2], rel[3]);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 766)     }
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 767)     window.removeEventListener('unload', unregisterEventListeners, false);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 768) }
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 769) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 770) function AttackScript() {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 771) 	GM_setValue("autoUse",1);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 772) 	GM_setValue("cancelAtEnd",1);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 773) 	document.forms.namedItem("attack").submit();
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 774) }
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 775) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 776) function ItemScript() {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 777) 	GM_setValue("autoUse",2);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 778) 	GM_setValue("cancelAtEnd",1);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 779) 	document.forms.namedItem("useitem").submit();
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 780) }
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 781) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 782) function getSelectByName(name) {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 783) 	var selects = document.getElementsByTagName("select");
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 784) 	return selects.namedItem(name);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 785) }
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 786) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 787) function setToRed() {
d7406053 (Hellion       2010-04-19 15:54:34 -0500 788) 	GM_setValue("autoUse", GM_getValue("autoUse") % 5 + 5);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 789) 	top.document.getElementsByName('charpane')[0].contentDocument.location.reload();
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 790) }
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 791) 
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 792) function addGlobalStyle(css) {
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 793)     var head, style;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 794)     head = document.getElementsByTagName('head')[0];
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 795)     if (!head) { return; }
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 796)     style = document.createElement('style');
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 797)     style.type = 'text/css';
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 798)     style.innerHTML = css;
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 799)     head.appendChild(style);
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 800) }
79ac7f08 (Nathan Sharfi 2010-01-07 02:58:22 -0800 801) 
